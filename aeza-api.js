const axios = require('axios');
const config = require('./config');

class AezaAPI {
    constructor() {
        this.apiKeyRu = config.AEZA_API_KEY_RU;
        this.apiKeyNet = config.AEZA_API_KEY_NET;
        this.baseURLRu = config.AEZA_BASE_URL_RU;
        this.baseURLNet = config.AEZA_BASE_URL_NET;
        
        this.clients = {};
        
        this.balanceHistory = {
            ru: null,
            net: null
        };
        this.monitoringEnabled = false;
        
        if (this.apiKeyRu) {
            this.clients.ru = axios.create({
                baseURL: this.baseURLRu,
                headers: {
                    'X-API-Key': this.apiKeyRu,
                    'Content-Type': 'application/json'
                }
            });
        }
        
        if (this.apiKeyNet) {
            this.clients.net = axios.create({
                baseURL: this.baseURLNet,
                headers: {
                    'X-API-Key': this.apiKeyNet,
                    'Content-Type': 'application/json'
                }
            });
        }
    }

    async makeRequest(endpoint, account = 'net') {
        try {
            const client = this.clients[account];
            if (!client) {
                throw new Error(`API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
            }

            console.log(`üîÑ –ó–∞–ø—Ä–æ—Å –∫ ${account} API: ${endpoint}`);
            const response = await client.get(endpoint);
            console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç ${account} API –ø–æ–ª—É—á–µ–Ω:`, response.status);
            
            return response.data;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${account} API:`, error.message);
            
            if (error.response) {
                console.error(`üìã –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${error.response.status}`);
                console.error(`üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, error.response.data);
                
                return {
                    error: {
                        status: error.response.status,
                        message: error.response.data?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API',
                        slug: error.response.data?.slug || 'unknown_error',
                        data: error.response.data?.data || {}
                    }
                };
            }
            
            throw error;
        }
    }

    async getBalance(account = 'net') {
        try {
            console.log(`üí∞ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –±–∞–ª–∞–Ω—Å –¥–ª—è ${account} –∞–∫–∫–∞—É–Ω—Ç–∞...`);
            const balanceData = await this.makeRequest('/desktop', account);
            
            if (balanceData.error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${account}:`, balanceData.error);
                return balanceData;
            }
            
            console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –¥–ª—è ${account} –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            return balanceData;
        } catch (error) {
            console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${account}:`, error);
            return {
                error: {
                    message: error.message,
                    slug: 'critical_error'
                }
            };
        }
    }

    async getAllBalances() {
        const results = {};
        
        if (this.apiKeyRu) {
            console.log('üá∑üá∫ –ü–æ–ª—É—á–∞—é –±–∞–ª–∞–Ω—Å RU –∞–∫–∫–∞—É–Ω—Ç–∞...');
            results.ru = await this.getBalance('ru');
        }
        
        if (this.apiKeyNet) {
            console.log('üåç –ü–æ–ª—É—á–∞—é –±–∞–ª–∞–Ω—Å NET –∞–∫–∫–∞—É–Ω—Ç–∞...');
            results.net = await this.getBalance('net');
        }
        
        return results;
    }

    formatSingleBalanceInfo(balanceData, accountType, maskId = true) {
        try {
            if (balanceData.error) {
                const flag = accountType === 'ru' ? 'üá∑üá∫' : 'üåç';
                const name = accountType === 'ru' ? '–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç (.ru)' : '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (.net)';
                const accountId = balanceData.data?.account?.id || 'N/A';
                const displayId = maskId ? this.maskAccountId(accountId) : accountId;
                
                let message = `${flag} <b>${name} #${displayId}</b>\n\n`;
                
                if (balanceData.error.slug === 'not_auth') {
                    message += `‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π`;
                } else {
                    message += `‚ùå –û—à–∏–±–∫–∞ API: ${balanceData.error.message}`;
                }
                
                return message;
            }
            
            const account = balanceData.data?.account || {};
            const balance = account.balance || 0;
            const referralState = account.referralState || {};
            
            const flag = accountType === 'ru' ? 'üá∑üá∫' : 'üåç';
            const name = accountType === 'ru' ? '–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç (.ru)' : '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (.net)';
            const currency = accountType === 'ru' ? '‚ÇΩ' : '‚Ç¨';
            const accountId = account.id || 'N/A';
            const displayId = maskId ? this.maskAccountId(accountId) : accountId;
            
            let message = `${flag} <b>${name} #${displayId}</b>\n\n`;
            
            if (accountType === 'ru') {
                const balanceValue = balance / 100;
                const withdrawBalance = (account.withdrawBalance || 0) / 100;
                const monthEarned = (referralState.monthEarned || 0) / 100;
                const bonusBalance = (account.bonusBalance || 0) / 100;
                
                message += `üíµ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: <b>${balanceValue.toFixed(2)} ${currency}</b>\n`;
                message += `üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${withdrawBalance.toFixed(2)} ${currency}</b>\n`;
                message += `üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>${monthEarned.toFixed(2)} ${currency}</b>\n`;

                if (bonusBalance > 0) {
                    message += `üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${bonusBalance.toFixed(2)} ${currency}</b>\n`;
                }
            } else {
                const balanceValue = balance / 100;
                const withdrawBalance = (account.withdrawBalance || 0) / 100;
                const monthEarned = (referralState.monthEarned || 0) / 100;
                const bonusBalance = (account.bonusBalance || 0) / 100;
                
                message += `üíµ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: <b>${balanceValue.toFixed(2)} ${currency}</b>\n`;
                message += `üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${withdrawBalance.toFixed(2)} ${currency}</b>\n`;
                message += `üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>${monthEarned.toFixed(2)} ${currency}</b>\n`;

                if (bonusBalance > 0) {
                    message += `üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${bonusBalance.toFixed(2)} ${currency}</b>\n`;
                }
            }

            if (referralState.state && referralState.state.current) {
                const currentPercent = (referralState.state.current.percent * 100).toFixed(1);
                message += `üéØ –ü–æ–ª—É—á–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: <b>${currentPercent}%</b>\n`;
            }

            
            const email = account.email || '–ù–µ —É–∫–∞–∑–∞–Ω';
            message += `üìß Email: <tg-spoiler>${email}</tg-spoiler>`;
            
            return message;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            return `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`;
        }
    }


    getCurrentTime() {
        return new Date().toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    }

    maskAccountId(accountId) {
        if (!accountId || accountId === 'N/A') {
            return '****';
        }
        
        const idStr = String(accountId);
        if (idStr.length <= 4) {
            return '*'.repeat(idStr.length);
        }
        
        const firstTwo = idStr.substring(0, 2);
        const lastTwo = idStr.substring(idStr.length - 2);
        const middleStars = '*'.repeat(idStr.length - 4);
        
        return `${firstTwo}${middleStars}${lastTwo}`;
    }

    enableMonitoring() {
        this.monitoringEnabled = true;
        console.log('üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ –≤–∫–ª—é—á–µ–Ω');
    }

    disableMonitoring() {
        this.monitoringEnabled = false;
        console.log('üîï –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ –≤—ã–∫–ª—é—á–µ–Ω');
    }

    async checkBalanceChanges() {
        if (!this.monitoringEnabled) {
            return [];
        }

        const notifications = [];
        
        try {
            const allBalances = await this.getAllBalances();
            
            if (allBalances.ru && !allBalances.ru.error) {
                const currentBalance = this.getReferralBalance(allBalances.ru, 'ru');
                const previousBalance = this.balanceHistory.ru;
                
                if (previousBalance !== null && currentBalance !== previousBalance) {
                    const notification = this.createBalanceChangeNotification(
                        'ru', 
                        previousBalance, 
                        currentBalance, 
                        allBalances.ru.data?.account?.id
                    );
                    notifications.push(notification);
                }
                
                this.balanceHistory.ru = currentBalance;
            }
            
            if (allBalances.net && !allBalances.net.error) {
                const currentBalance = this.getReferralBalance(allBalances.net, 'net');
                const previousBalance = this.balanceHistory.net;
                
                if (previousBalance !== null && currentBalance !== previousBalance) {
                    const notification = this.createBalanceChangeNotification(
                        'net', 
                        previousBalance, 
                        currentBalance, 
                        allBalances.net.data?.account?.id
                    );
                    notifications.push(notification);
                }
                
                this.balanceHistory.net = currentBalance;
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞:', error);
        }
        
        return notifications;
    }

    getReferralBalance(balanceData, accountType) {
        const account = balanceData.data?.account || {};
        const withdrawBalance = account.withdrawBalance || 0;
        return withdrawBalance / 100;
    }

    createBalanceChangeNotification(accountType, oldBalance, newBalance, accountId) {
        const flag = accountType === 'ru' ? 'üá∑üá∫' : 'üåç';
        const domain = accountType === 'ru' ? 'ru' : 'net';
        const currency = accountType === 'ru' ? '‚ÇΩ' : '‚Ç¨';
        
        const oldFormatted = `${oldBalance.toFixed(2)}${currency}`;
        const newFormatted = `${newBalance.toFixed(2)}${currency}`;
        
        const maskedId = this.maskAccountId(accountId);
        
        let message = `üîî <b>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è</b>\n\n`;
        message += `${flag} ${domain} #${maskedId}\n`;
        message += `–° <s>${oldFormatted}</s> ‚Üí <b>${newFormatted}</b>`;
        
        return message;
    }

    createInlineResultRU(balanceData) {
        if (balanceData.error) {
            return {
                type: 'article',
                id: 'ru_error',
                title: 'üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç (.ru)',
                description: '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                message_text: `üá∑üá∫ <b>–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç (.ru)</b>\n\n‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π`,
                parse_mode: 'HTML'
            };
        }

        const account = balanceData.data?.account || {};
        const referralState = account.referralState || {};
        const accountId = account.id || 'N/A';
        const maskedId = this.maskAccountId(accountId);
        
        const withdrawBalance = (account.withdrawBalance || 0) / 100;
        const monthEarned = (referralState.monthEarned || 0) / 100;
        const currentPercent = referralState.state?.current?.percent ? 
            (referralState.state.current.percent * 100).toFixed(1) : '0.0';

        const message = `üá∑üá∫ <b>–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç (.ru) #${maskedId}</b>\n\n` +
            `üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${withdrawBalance.toFixed(2)} ‚ÇΩ</b>\n` +
            `üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>${monthEarned.toFixed(2)} ‚ÇΩ</b>\n` +
            `üéØ –ü–æ–ª—É—á–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: <b>${currentPercent}%</b>`;

        return {
            type: 'article',
            id: 'ru_balance',
            title: 'üá∑üá∫ RU –ë–∞–ª–∞–Ω—Å',
            description: `üí∏ ${withdrawBalance.toFixed(2)}‚ÇΩ | üìà ${monthEarned.toFixed(2)}‚ÇΩ | üéØ ${currentPercent}%`,
            message_text: message,
            parse_mode: 'HTML'
        };
    }

    createInlineResultNET(balanceData) {
        if (balanceData.error) {
            return {
                type: 'article',
                id: 'net_error',
                title: 'üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (.net)',
                description: '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                message_text: `üåç <b>–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (.net)</b>\n\n‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π`,
                parse_mode: 'HTML'
            };
        }

        const account = balanceData.data?.account || {};
        const referralState = account.referralState || {};
        const accountId = account.id || 'N/A';
        const maskedId = this.maskAccountId(accountId);
        
        const withdrawBalance = (account.withdrawBalance || 0) / 100;
        const monthEarned = (referralState.monthEarned || 0) / 100;
        const currentPercent = referralState.state?.current?.percent ? 
            (referralState.state.current.percent * 100).toFixed(1) : '0.0';

        const message = `üåç <b>–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (.net) #${maskedId}</b>\n\n` +
            `üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${withdrawBalance.toFixed(2)} ‚Ç¨</b>\n` +
            `üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>${monthEarned.toFixed(2)} ‚Ç¨</b>\n` +
            `üéØ –ü–æ–ª—É—á–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: <b>${currentPercent}%</b>`;

        return {
            type: 'article',
            id: 'net_balance',
            title: 'üåç NET –ë–∞–ª–∞–Ω—Å',
            description: `üí∏ ${withdrawBalance.toFixed(2)}‚Ç¨ | üìà ${monthEarned.toFixed(2)}‚Ç¨ | üéØ ${currentPercent}%`,
            message_text: message,
            parse_mode: 'HTML'
        };
    }
}

module.exports = AezaAPI;