
const axios = require('axios');
const config = require('./config');

class AezaAPI {
    constructor() {
        this.apiKeyRu = config.AEZA_API_KEY_RU;
        this.apiKeyNet = config.AEZA_API_KEY_NET;
        this.baseURLRu = config.AEZA_BASE_URL_RU;
        this.baseURLNet = config.AEZA_BASE_URL_NET;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ API –∫–ª—é—á–∞
        this.clients = {};
        
        // –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        this.balanceHistory = {
            ru: null,
            net: null
        };
        this.monitoringEnabled = false;
        
        if (this.apiKeyRu) {
            this.clients.ru = axios.create({
                baseURL: this.baseURLRu,
                headers: {
                    'X-API-Key': this.apiKeyRu,
                    'Content-Type': 'application/json'
                },
                timeout: 10000
            });
            console.log(`üá∑üá∫ RU –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è: ${this.baseURLRu}`);
        }
        
        if (this.apiKeyNet) {
            this.clients.net = axios.create({
                baseURL: this.baseURLNet,
                headers: {
                    'X-API-Key': this.apiKeyNet,
                    'Content-Type': 'application/json'
                },
                timeout: 10000
            });
            console.log(`üåç NET –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è: ${this.baseURLNet}`);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
     * @param {string} account - –ê–∫–∫–∞—É–Ω—Ç ('ru' –∏–ª–∏ 'net')
     * @param {string} method - HTTP –º–µ—Ç–æ–¥
     * @param {string} endpoint - –≠–Ω–¥–ø–æ–∏–Ω—Ç API
     * @param {object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     * @returns {Promise<object>} –û—Ç–≤–µ—Ç –æ—Ç API
     */
    async makeRequest(account, method, endpoint, data = null) {
        const client = this.clients[account];
        if (!client) {
            throw new Error(`API –∫–ª—é—á –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${account} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
        }
        
        const baseURL = account === 'ru' ? this.baseURLRu : this.baseURLNet;
        console.log(`üîó API –∑–∞–ø—Ä–æ—Å (${account}): ${method} ${baseURL}${endpoint}`);
        
        try {
            const response = await client({
                method,
                url: endpoint,
                data
            });
            
            console.log(`‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (${account}): ${response.status} ${response.statusText}`);
            console.log(`üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(response.data).length} —Å–∏–º–≤–æ–ª–æ–≤`);
            
            return response.data;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ (${account}): ${error.message}`);
            
            if (error.response) {
                // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π
                console.error(`üìã HTTP —Å—Ç–∞—Ç—É—Å: ${error.response.status}`);
                console.error(`üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, error.response.data);
                
                const errorData = error.response.data;
                if (errorData && errorData.error) {
                    throw new Error(`API Error (${account}): ${errorData.error.message || errorData.error.slug}`);
                }
                throw new Error(`HTTP ${error.response.status}: ${error.response.statusText}`);
            } else if (error.request) {
                // –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
                console.error('üìã –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
                throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ AEZA');
            } else {
                // –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
                console.error('üìã –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞
     * @param {string} account - –ê–∫–∫–∞—É–Ω—Ç ('ru' –∏–ª–∏ 'net')
     * @returns {Promise<object>} –î–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ
     */
    async getBalance(account) {
        return await this.makeRequest(account, 'GET', '/desktop');
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
     * @returns {Promise<object>} –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ
     */
    async getAllBalances() {
        const results = {};
        
        if (this.clients.ru) {
            try {
                results.ru = await this.getBalance('ru');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ RU:', error.message);
                results.ru = null;
            }
        }
        
        if (this.clients.net) {
            try {
                results.net = await this.getBalance('net');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ NET:', error.message);
                results.net = null;
            }
        }
        
        return results;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {object} allBalances - –î–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ –æ—Ç –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    formatBalanceInfo(allBalances) {
        try {
            let message = 'üí∞ <b>–ë–∞–ª–∞–Ω—Å AEZA</b>\n\n';
            
            let totalBalance = 0;
            let totalWithdrawBalance = 0;
            let totalMonthEarned = 0;
            let totalBonusBalance = 0;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç
            if (allBalances.ru) {
                if (allBalances.ru.error) {
                    message += `üá∑üá∫ **–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç (.ru)**\n`;
                    if (allBalances.ru.error.slug === 'not_auth') {
                        message += `‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π\n`;
                    } else {
                        message += `‚ùå –û—à–∏–±–∫–∞: ${allBalances.ru.error.message}\n`;
                    }
                    message += `\n`;
                } else {
                    const account = allBalances.ru.data?.account || {};
                    const balance = account.balance || 0;
                    const referralState = account.referralState || {};
                    
                    // –î–ª—è RU –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∂–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–Ω—É–∂–Ω–æ –¥–µ–ª–∏—Ç—å –Ω–∞ 100)
                    const balanceValue = balance / 100;
                    const withdrawBalance = (account.withdrawBalance || 0) / 100;
                    const monthEarned = (referralState.monthEarned || 0) / 100;
                    const bonusBalance = (account.bonusBalance || 0) / 100;
                    
                    message += `üá∑üá∫ <b>–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç (.ru)</b>\n`;
                    message += `üíµ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: <b>${balanceValue.toFixed(2)} ‚ÇΩ</b>\n`;
                    message += `üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${withdrawBalance.toFixed(2)} ‚ÇΩ</b>\n`;
                    message += `üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>${monthEarned.toFixed(2)} ‚ÇΩ</b>\n`;
                    
                    if (bonusBalance > 0) {
                        message += `üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${bonusBalance.toFixed(2)} ‚ÇΩ</b>\n`;
                    }
                    
                    if (referralState.state && referralState.state.current) {
                        const currentPercent = (referralState.state.current.percent * 100).toFixed(1);
                        message += `üéØ –ü–æ–ª—É—á–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: <b>${currentPercent}%</b>\n`;
                    }
                    
                    const email = account.email || '–ù–µ —É–∫–∞–∑–∞–Ω';
                    message += `üìß Email: <tg-spoiler>${email}</tg-spoiler>\n\n`;
                }
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            if (allBalances.net) {
                const account = allBalances.net.data?.account || {};
                const balance = account.balance || 0;
                const referralState = account.referralState || {};
                
                // –î–ª—è NET –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–Ω—É–∂–Ω–æ –¥–µ–ª–∏—Ç—å –Ω–∞ 100)
                const balanceValue = balance / 100;
                const withdrawBalance = (account.withdrawBalance || 0) / 100;
                const monthEarned = (referralState.monthEarned || 0) / 100;
                const bonusBalance = (account.bonusBalance || 0) / 100;
                
                message += `üåç <b>–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (.net)</b>\n`;
                message += `üíµ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: <b>${balanceValue.toFixed(2)} ‚Ç¨</b>\n`;
                message += `üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${withdrawBalance.toFixed(2)} ‚Ç¨</b>\n`;
                message += `üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>${monthEarned.toFixed(2)} ‚Ç¨</b>\n`;
                
                if (bonusBalance > 0) {
                    message += `üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${bonusBalance.toFixed(2)} ‚Ç¨</b>\n`;
                }
                
                if (referralState.state && referralState.state.current) {
                    const currentPercent = (referralState.state.current.percent * 100).toFixed(1);
                    message += `üéØ –ü–æ–ª—É—á–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: <b>${currentPercent}%</b>\n`;
                }
                
                // –°–∫—Ä—ã–≤–∞–µ–º email –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º (—Å–ø–æ–π–ª–µ—Ä)
                const email = account.email || '–ù–µ —É–∫–∞–∑–∞–Ω';
                message += `üìß Email: <tg-spoiler>${email}</tg-spoiler>\n\n`;
            }
            
            // –û–±—â–∏–π –∏—Ç–æ–≥ —É–±—Ä–∞–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            message += `\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${this.getCurrentTime()}`;
            
            return message;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            return `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
     * @param {object} balanceData - –î–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ –æ—Ç API
     * @param {string} accountType - –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ ('ru' –∏–ª–∏ 'net')
     * @param {boolean} maskId - –ú–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å –ª–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    formatSingleBalanceInfo(balanceData, accountType, maskId = true) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ API
            if (balanceData.error) {
                const flag = accountType === 'ru' ? 'üá∑üá∫' : 'üåç';
                const name = accountType === 'ru' ? '–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç (.ru)' : '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (.net)';
                const accountId = balanceData.data?.account?.id || 'N/A';
                const displayId = maskId ? this.maskAccountId(accountId) : accountId;
                
                let message = `${flag} <b>${name} #${displayId}</b>\n\n`;
                
                if (balanceData.error.slug === 'not_auth') {
                    message += `‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π`;
                } else {
                    message += `‚ùå –û—à–∏–±–∫–∞ API: ${balanceData.error.message}`;
                }
                
                return message;
            }
            
            const account = balanceData.data?.account || {};
            const balance = account.balance || 0;
            const referralState = account.referralState || {};
            
            const flag = accountType === 'ru' ? 'üá∑üá∫' : 'üåç';
            const name = accountType === 'ru' ? '–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç (.ru)' : '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (.net)';
            const currency = accountType === 'ru' ? '‚ÇΩ' : '‚Ç¨';
            const accountId = account.id || 'N/A';
            const displayId = maskId ? this.maskAccountId(accountId) : accountId;
            
            let message = `${flag} <b>${name} #${displayId}</b>\n\n`;
            
            if (accountType === 'ru') {
                // –î–ª—è RU –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∂–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–Ω—É–∂–Ω–æ –¥–µ–ª–∏—Ç—å –Ω–∞ 100)
                const balanceValue = balance / 100;
                const withdrawBalance = (account.withdrawBalance || 0) / 100;
                const monthEarned = (referralState.monthEarned || 0) / 100;
                const bonusBalance = (account.bonusBalance || 0) / 100;
                
                message += `üíµ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: <b>${balanceValue.toFixed(2)} ${currency}</b>\n`;
                message += `üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${withdrawBalance.toFixed(2)} ${currency}</b>\n`;
                message += `üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>${monthEarned.toFixed(2)} ${currency}</b>\n`;
                
                if (bonusBalance > 0) {
                    message += `üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${bonusBalance.toFixed(2)} ${currency}</b>\n`;
                }
            } else {
                // –î–ª—è NET –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–Ω—É–∂–Ω–æ –¥–µ–ª–∏—Ç—å –Ω–∞ 100)
                const balanceValue = balance / 100;
                const withdrawBalance = (account.withdrawBalance || 0) / 100;
                const monthEarned = (referralState.monthEarned || 0) / 100;
                const bonusBalance = (account.bonusBalance || 0) / 100;
                
                message += `üíµ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: <b>${balanceValue.toFixed(2)} ${currency}</b>\n`;
                message += `üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${withdrawBalance.toFixed(2)} ${currency}</b>\n`;
                message += `üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>${monthEarned.toFixed(2)} ${currency}</b>\n`;
                
                if (bonusBalance > 0) {
                    message += `üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${bonusBalance.toFixed(2)} ${currency}</b>\n`;
                }
            }
            
            if (referralState.state && referralState.state.current) {
                const currentPercent = (referralState.state.current.percent * 100).toFixed(1);
                message += `üéØ –ü–æ–ª—É—á–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: <b>${currentPercent}%</b>\n`;
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º email –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º (—Å–ø–æ–π–ª–µ—Ä)
            const email = account.email || '–ù–µ —É–∫–∞–∑–∞–Ω';
            message += `üìß Email: <tg-spoiler>${email}</tg-spoiler>`;
            
            return message;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            return `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö
     * @param {object} servicesData - –î–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö –æ—Ç API
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    formatServersInfo(servicesData) {
        try {
            if (!servicesData || !servicesData.items || servicesData.items.length === 0) {
                return 'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.';
            }

            const servers = servicesData.items;
            let message = 'üñ•Ô∏è **–í–∞—à–∏ —Å–µ—Ä–≤–µ—Ä—ã:**\n\n';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å–µ—Ä–≤–µ—Ä–æ–≤
            const serversToShow = servers.slice(0, 10);

            serversToShow.forEach(server => {
                const serverId = server.id || 'N/A';
                const name = server.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                const status = server.status || 'unknown';

                // –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                const statusEmoji = {
                    'active': '‚úÖ',
                    'suspended': '‚è∏Ô∏è',
                    'installing': '‚öôÔ∏è',
                    'error': '‚ùå'
                }[status] || '‚ùì';

                message += `${statusEmoji} **${name}** (ID: ${serverId})\n`;
                message += `   –°—Ç–∞—Ç—É—Å: ${status}\n\n`;
            });

            if (servers.length > 10) {
                message += `... –∏ –µ—â—ë ${servers.length - 10} —Å–µ—Ä–≤–µ—Ä–æ–≤\n\n`;
            }

            message += `**–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤:** ${servers.length}`;

            return message;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
            return `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö: ${error.message}`;
        }
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     */
    escapeMarkdownV2(text) {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
        const specialChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
        let escaped = String(text);
        
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
        for (const char of specialChars) {
            const regex = new RegExp('\\' + char, 'g');
            escaped = escaped.replace(regex, '\\' + char);
        }
        
        console.log(`üîß –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: "${text}" ‚Üí "${escaped}"`);
        return escaped;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
     * @returns {string} –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    getCurrentTime() {
        return new Date().toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    }

    /**
     * –ú–∞—Å–∫–∏—Ä—É–µ—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ü–∏—Ñ—Ä—ã
     * @param {string|number} accountId - ID –∞–∫–∫–∞—É–Ω—Ç–∞
     * @returns {string} –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
     */
    maskAccountId(accountId) {
        if (!accountId || accountId === 'N/A') {
            return '****';
        }
        
        const idStr = String(accountId);
        if (idStr.length <= 4) {
            return '*'.repeat(idStr.length);
        }
        
        const firstTwo = idStr.substring(0, 2);
        const lastTwo = idStr.substring(idStr.length - 2);
        const middleStars = '*'.repeat(idStr.length - 4);
        
        return `${firstTwo}${middleStars}${lastTwo}`;
    }

    /**
     * –í–∫–ª—é—á–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞
     */
    enableMonitoring() {
        this.monitoringEnabled = true;
        console.log('üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ –≤–∫–ª—é—á–µ–Ω');
    }

    /**
     * –í—ã–∫–ª—é—á–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞
     */
    disableMonitoring() {
        this.monitoringEnabled = false;
        console.log('üîï –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ –≤—ã–∫–ª—é—á–µ–Ω');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ
     * @returns {Array} –ú–∞—Å—Å–∏–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
     */
    async checkBalanceChanges() {
        if (!this.monitoringEnabled) {
            return [];
        }

        const notifications = [];
        
        try {
            const allBalances = await this.getAllBalances();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º RU –∞–∫–∫–∞—É–Ω—Ç
            if (allBalances.ru && !allBalances.ru.error) {
                const currentBalance = this.getReferralBalance(allBalances.ru, 'ru');
                const previousBalance = this.balanceHistory.ru;
                
                if (previousBalance !== null && currentBalance !== previousBalance) {
                    const notification = this.createBalanceChangeNotification(
                        'ru', 
                        previousBalance, 
                        currentBalance, 
                        allBalances.ru.data?.account?.id
                    );
                    notifications.push(notification);
                }
                
                this.balanceHistory.ru = currentBalance;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º NET –∞–∫–∫–∞—É–Ω—Ç
            if (allBalances.net && !allBalances.net.error) {
                const currentBalance = this.getReferralBalance(allBalances.net, 'net');
                const previousBalance = this.balanceHistory.net;
                
                if (previousBalance !== null && currentBalance !== previousBalance) {
                    const notification = this.createBalanceChangeNotification(
                        'net', 
                        previousBalance, 
                        currentBalance, 
                        allBalances.net.data?.account?.id
                    );
                    notifications.push(notification);
                }
                
                this.balanceHistory.net = currentBalance;
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞:', error);
        }
        
        return notifications;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
     * @param {object} balanceData - –î–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞
     * @param {string} accountType - –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
     * @returns {number} –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
     */
    getReferralBalance(balanceData, accountType) {
        const account = balanceData.data?.account || {};
        const withdrawBalance = account.withdrawBalance || 0;
        return withdrawBalance / 100; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
     * @param {string} accountType - –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
     * @param {number} oldBalance - –°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å
     * @param {number} newBalance - –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
     * @param {number} accountId - ID –∞–∫–∫–∞—É–Ω—Ç–∞
     * @returns {string} –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    createBalanceChangeNotification(accountType, oldBalance, newBalance, accountId) {
        const flag = accountType === 'ru' ? 'üá∑üá∫' : 'üåç';
        const domain = accountType === 'ru' ? 'ru' : 'net';
        const currency = accountType === 'ru' ? '‚ÇΩ' : '‚Ç¨';
        
        const oldFormatted = `${oldBalance.toFixed(2)}${currency}`;
        const newFormatted = `${newBalance.toFixed(2)}${currency}`;
        
        const maskedId = this.maskAccountId(accountId);
        
        let message = `üîî <b>–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è</b>\n\n`;
        message += `${flag} ${domain} #${maskedId}\n`;
        message += `–° <s>${oldFormatted}</s> ‚Üí <b>${newFormatted}</b>`;
        
        return message;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è RU –∞–∫–∫–∞—É–Ω—Ç–∞
     * @param {object} balanceData - –î–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞
     * @returns {object} Inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç
     */
    createInlineResultRU(balanceData) {
        if (balanceData.error) {
            return {
                type: 'article',
                id: 'ru_error',
                title: 'üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç (.ru)',
                description: '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                message_text: `üá∑üá∫ <b>–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç (.ru)</b>\n\n‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π`,
                parse_mode: 'HTML'
            };
        }

        const account = balanceData.data?.account || {};
        const referralState = account.referralState || {};
        const accountId = account.id || 'N/A';
        const maskedId = this.maskAccountId(accountId);
        
        const withdrawBalance = (account.withdrawBalance || 0) / 100;
        const monthEarned = (referralState.monthEarned || 0) / 100;
        const currentPercent = referralState.state?.current?.percent ? 
            (referralState.state.current.percent * 100).toFixed(1) : '0.0';

        const message = `üá∑üá∫ <b>–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç (.ru) #${maskedId}</b>\n\n` +
            `üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${withdrawBalance.toFixed(2)} ‚ÇΩ</b>\n` +
            `üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>${monthEarned.toFixed(2)} ‚ÇΩ</b>\n` +
            `üéØ –ü–æ–ª—É—á–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: <b>${currentPercent}%</b>`;

        return {
            type: 'article',
            id: 'ru_balance',
            title: 'üá∑üá∫ RU –ë–∞–ª–∞–Ω—Å',
            description: `üí∏ ${withdrawBalance.toFixed(2)}‚ÇΩ | üìà ${monthEarned.toFixed(2)}‚ÇΩ | üéØ ${currentPercent}%`,
            message_text: message,
            parse_mode: 'HTML'
        };
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è NET –∞–∫–∫–∞—É–Ω—Ç–∞
     * @param {object} balanceData - –î–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞
     * @returns {object} Inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç
     */
    createInlineResultNET(balanceData) {
        if (balanceData.error) {
            return {
                type: 'article',
                id: 'net_error',
                title: 'üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (.net)',
                description: '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                message_text: `üåç <b>–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (.net)</b>\n\n‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π`,
                parse_mode: 'HTML'
            };
        }

        const account = balanceData.data?.account || {};
        const referralState = account.referralState || {};
        const accountId = account.id || 'N/A';
        const maskedId = this.maskAccountId(accountId);
        
        const withdrawBalance = (account.withdrawBalance || 0) / 100;
        const monthEarned = (referralState.monthEarned || 0) / 100;
        const currentPercent = referralState.state?.current?.percent ? 
            (referralState.state.current.percent * 100).toFixed(1) : '0.0';

        const message = `üåç <b>–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (.net) #${maskedId}</b>\n\n` +
            `üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>${withdrawBalance.toFixed(2)} ‚Ç¨</b>\n` +
            `üìà –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>${monthEarned.toFixed(2)} ‚Ç¨</b>\n` +
            `üéØ –ü–æ–ª—É—á–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: <b>${currentPercent}%</b>`;

        return {
            type: 'article',
            id: 'net_balance',
            title: 'üåç NET –ë–∞–ª–∞–Ω—Å',
            description: `üí∏ ${withdrawBalance.toFixed(2)}‚Ç¨ | üìà ${monthEarned.toFixed(2)}‚Ç¨ | üéØ ${currentPercent}%`,
            message_text: message,
            parse_mode: 'HTML'
        };
    }
}

module.exports = AezaAPI;
