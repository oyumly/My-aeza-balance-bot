const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');
const AezaAPI = require('./aeza-api');

const bot = new TelegramBot(config.TELEGRAM_BOT_TOKEN, config.POLLING_OPTIONS);
const aezaAPI = new AezaAPI();

console.log('ü§ñ AEZA Balance Bot –∑–∞–ø—É—â–µ–Ω!');

function checkUserAccess(userId) {
    if (!config.ALLOWED_USER_ID) {
        return true;
    }
    
    return userId.toString() === config.ALLOWED_USER_ID;
}

function sendAccessDenied(chatId) {
    bot.sendMessage(chatId, 'üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.', {
        parse_mode: 'HTML'
    });
}

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    if (!checkUserAccess(userId)) {
        console.log(`‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return sendAccessDenied(chatId);
    }
    
    const welcomeMessage = `
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AEZA Balance Bot!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è.

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

<b>–û –±–æ—Ç–µ:</b>
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API AEZA (—ç–Ω–¥–ø–æ–∏–Ω—Ç GET desktop) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∂–¥—ã–π —á–∞—Å.
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @oyumly

<b>–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏:</b>
–°–ø–∞—Å–∏–±–æ @nesqdzy –∑–∞ —É–∫–∞–∑–∞–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è aeza.net –∏ aeza.ru

üìö <a href="https://github.com/sqdzy/aeza-api-endpoints">GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏</a>
    `.trim();
    
    bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'HTML'
    });
    
    if (!monitoringInterval) {
        startBalanceMonitoring(chatId);
    }
});

bot.onText(/\/balance/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const username = msg.from.username || msg.from.first_name || 'Unknown';
    
    console.log(`üìä –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} (ID: ${userId})`);
    
    if (!checkUserAccess(userId)) {
        console.log(`üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return sendAccessDenied(chatId);
    }
    
    if (!monitoringInterval) {
        startBalanceMonitoring(chatId);
    }
    
    try {
        console.log('‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ...');
        const loadingMessage = await bot.sendMessage(chatId, '‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ...', {
            parse_mode: 'HTML'
        });
        
        console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ AEZA API...');
        const allBalances = await aezaAPI.getAllBalances();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã:', JSON.stringify(allBalances, null, 2));
        
        await bot.deleteMessage(chatId, loadingMessage.message_id);
        
        if (allBalances.ru) {
            if (allBalances.ru.error) {
                const ruErrorMessage = `üá∑üá∫ <b>–†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç (.ru)</b>\n\n‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π`;
                await bot.sendMessage(chatId, ruErrorMessage, {
                    parse_mode: 'HTML'
                });
            } else {
                const ruMessage = aezaAPI.formatSingleBalanceInfo(allBalances.ru, 'ru', false);
                await bot.sendMessage(chatId, ruMessage, {
                    parse_mode: 'HTML'
                });
            }
        }
        
        if (allBalances.net) {
            if (allBalances.net.error) {
                const netErrorMessage = `üåç <b>–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (.net)</b>\n\n‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π`;
                await bot.sendMessage(chatId, netErrorMessage, {
                    parse_mode: 'HTML'
                });
            } else {
                const netMessage = aezaAPI.formatSingleBalanceInfo(allBalances.net, 'net', false);
                await bot.sendMessage(chatId, netMessage, {
                    parse_mode: 'HTML'
                });
            }
        }
        
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.stack);
        
        bot.sendMessage(chatId, `‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:**\n\n\`${error.message}\`\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞.`, {
            parse_mode: 'HTML'
        });
    }
});

bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (!checkUserAccess(userId)) {
        console.log(`üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return sendAccessDenied(chatId);
    }

    const helpMessage = `
üÜò <b>–°–ø—Ä–∞–≤–∫–∞:</b>

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–û –±–æ—Ç–µ:</b>
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API AEZA (—ç–Ω–¥–ø–æ–∏–Ω—Ç GET desktop) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∂–¥—ã–π —á–∞—Å.
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @oyumly

<b>–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏:</b>
–°–ø–∞—Å–∏–±–æ @nesqdzy –∑–∞ —É–∫–∞–∑–∞–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è aeza.net –∏ aeza.ru

üìö <a href="https://github.com/sqdzy/aeza-api-endpoints">GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏</a>
    `;

    bot.sendMessage(chatId, helpMessage, {
        parse_mode: 'HTML'
    });
});

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;
    
    if (text && text.startsWith('/') && !['/start', '/help', '/balance'].includes(text)) {
        if (!checkUserAccess(userId)) {
            return sendAccessDenied(chatId);
        }
        
        bot.sendMessage(chatId, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.', {
            parse_mode: 'HTML'
        });
    }
});

bot.on('inline_query', async (query) => {
    const queryText = query.query.toLowerCase().trim();
    const results = [];
    
    console.log(`üîç Inline –∑–∞–ø—Ä–æ—Å: "${queryText}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${query.from.id}`);
    
    try {
        if (queryText.includes('ru') || queryText.includes('—Ä–æ—Å—Å–∏—è')) {
            const ruBalance = await aezaAPI.getBalance('ru');
            const ruResult = aezaAPI.createInlineResultRU(ruBalance);
            results.push(ruResult);
        }
        
        if (queryText.includes('net') || queryText.includes('–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π') || queryText.includes('international')) {
            const netBalance = await aezaAPI.getBalance('net');
            const netResult = aezaAPI.createInlineResultNET(netBalance);
            results.push(netResult);
        }
        
        if (results.length === 0) {
            results.push({
                type: 'article',
                id: 'unknown',
                title: '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
                description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ru, net',
                message_text: `‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n` +
                    `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
                    `‚Ä¢ ru - –†–æ—Å—Å–∏–π—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç\n` +
                    `‚Ä¢ net - –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç`,
                parse_mode: 'HTML'
            });
        }
        
        await bot.answerInlineQuery(query.id, results, {
            cache_time: 30
        });
        
        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${results.length} inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline –∑–∞–ø—Ä–æ—Å–∞:', error);
        
        await bot.answerInlineQuery(query.id, [{
            type: 'article',
            id: 'error',
            title: '‚ùå –û—à–∏–±–∫–∞',
            description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
            message_text: '‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
            parse_mode: 'HTML'
        }]);
    }
});

bot.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
});

let monitoringInterval = null;
let allowedChatId = null;

function startBalanceMonitoring(chatId) {
    if (monitoringInterval) {
        console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
        return;
    }
    
    allowedChatId = chatId;
    aezaAPI.enableMonitoring();
    
    initializeBalanceHistory();
    
    monitoringInterval = setInterval(async () => {
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...');
            const notifications = await aezaAPI.checkBalanceChanges();
            
            if (notifications.length > 0) {
                console.log(`üì¢ –ù–∞–π–¥–µ–Ω–æ ${notifications.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞`);
                
                for (const notification of notifications) {
                    await bot.sendMessage(allowedChatId, notification, {
                        parse_mode: 'HTML'
                    });
                    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                }
            } else {
                console.log('‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
        }
    }, 3600000);
    
    console.log('üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å)');
}

function stopBalanceMonitoring() {
    if (monitoringInterval) {
        clearInterval(monitoringInterval);
        monitoringInterval = null;
        aezaAPI.disableMonitoring();
        console.log('üîï –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}

async function initializeBalanceHistory() {
    try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞...');
        const allBalances = await aezaAPI.getAllBalances();
        
        if (allBalances.ru && !allBalances.ru.error) {
            const ruBalance = aezaAPI.getReferralBalance(allBalances.ru, 'ru');
            aezaAPI.balanceHistory.ru = ruBalance;
            console.log(`üá∑üá∫ RU –±–∞–ª–∞–Ω—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${ruBalance.toFixed(2)} ‚ÇΩ`);
        }
        
        if (allBalances.net && !allBalances.net.error) {
            const netBalance = aezaAPI.getReferralBalance(allBalances.net, 'net');
            aezaAPI.balanceHistory.net = netBalance;
            console.log(`üåç NET –±–∞–ª–∞–Ω—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${netBalance.toFixed(2)} ‚Ç¨`);
        }
        
        console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    }
}

process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞...');
    stopBalanceMonitoring();
    bot.stopPolling();
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞...');
    bot.stopPolling();
    process.exit(0);
});